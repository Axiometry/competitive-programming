val in = """...........6.b....................................
           |........6................8........................
           |..Y.......................................o.......
           |....V...j............B.............c..............
           |............8.........X.......L...................
           |.....j..v6.......3.L..................c...........
           |..Mj.....p3.......b........Z....................J.
           |..........M...X...................................
           |V..............v......p.........Z.........c.......
           |..............3...................................
           |.......V......U3.............c....................
           |..........b..v.M.U8...............................
           |..........j........8.....................J........
           |..........Y......q........LH..Z...D...........y...
           |..2Y........PX......6..................BQ.........
           |...0.Y...............XP...........w...............
           |.........U.......2...............oH.y.............
           |0..............9........U.........................
           |...........P..............W.......z...Oy..........
           |...................t...p.W..o.............Q.......
           |.....S.................t.....Q....B...............
           |S.k..................V..W...p.......H...O......m..
           |....S.h................W.......................O..
           |..h..P.2.............Z.............J..............
           |.........k.......5v.......q...t.s.................
           |.....Q.....h..........................J...B.......
           |........0.........l...............................
           |.S................................................
           |.............................M....................
           |2..................e.....o.....y..................
           |................k.................................
           |......4......k....t...s.q.........................
           |.4.......................q........................
           |.......................z....E.....................
           |.............0.....d..............................
           |7..........D........z.............................
           |.......D..5......7..9.............................
           |......5..................E........................
           |D..............K......d..9E..........w.....1..C...
           |.......K..x.........d....s...........l............
           |........7......................u...C..............
           |..K........x..............9..C...u................
           |4..............s.........................l...T..w.
           |.......5.....7..................m......T......1...
           |...........................E...z.m................
           |......................................u...C.......
           |.............................em...................
           |..............................................T...
           |....................x.......................e.....
           |.............................1e....w....l.........""".stripMargin
val in2 =
  """............
    |........0...
    |.....0......
    |.......0....
    |....0.......
    |......A.....
    |............
    |............
    |........A...
    |.........A..
    |............
    |............""".stripMargin

val grid = in.linesIterator.toIndexedSeq
val w = grid.length
val h = grid(0).length

case class Pos(x: Int, y: Int) {
  def +(p: Pos): Pos = Pos(x+p.x, y+p.y)
  def -(p: Pos): Pos = Pos(x-p.x, y-p.y)
  def /(n: Int): Pos = Pos(x/n, y/n)
  def isValid = x >= 0 && y >= 0 && x < w && y < h
}

val freqPos = grid.zipWithIndex.flatMap { case (s, i) => s.zipWithIndex.filter(_._1 != '.').map { case (f, j) => (f, Pos(i, j)) } }.groupBy(_._1).view.mapValues(_.map(_._2).distinct).toMap

println((for ((f, ps) <- freqPos; p1 <- ps; p2 <- ps; if p1 != p2) yield {
  val p21 = p1-p2
  val p12 = p2-p1
  val outer = Seq(p2+p12, p1+p21).filter(_.isValid)
  if(p12.x%3==0 && p12.y%3 == 0)
    outer ++ Seq(p1+(p12/3), p2+(p21/3))
  else
    outer
}).flatten.toSet.size)

println((for ((f, ps) <- freqPos; p1 <- ps; p2 <- ps; if p1 != p2) yield {
  val p21 = p1-p2
  val gcd = BigInt(p21.x).gcd(BigInt(p21.y)).toInt
  val p21g = p21/gcd
  val p12g = (p2-p1)/gcd
  Iterator.iterate(p1)(_ + p12g).takeWhile(_.isValid) ++ Iterator.iterate(p2)(_ + p21g).takeWhile(_.isValid)
}).flatten.toSet.size)
